
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\tracks.TrackDataset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_tracks.TrackDataset.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_tracks.TrackDataset.py:


===================
TC Dataset Analysis
===================
This sample script illustrates how to read in, visualize and analyze HURDAT2 and IBTrACS tropical cyclone databases.

.. GENERATED FROM PYTHON SOURCE LINES 7-11

.. code-block:: default


    import tropycal.tracks as tracks
    import datetime as dt








.. GENERATED FROM PYTHON SOURCE LINES 12-19

HURTDAT2 Dataset
----------------
Let's start with the HURDAT2 dataset by loading it into memory. By default, this reads in the HURDAT dataset from the National Hurricane Center (NHC) website, unless you specify a local file path using either ``atlantic_url`` for the North Atlantic basin on ``pacific_url`` for the East & Central Pacific basin.

HURDAT data is not available for the most recent hurricane seasons. To include the latest data up through today, the "include_btk" flag would need to be set to True, which reads in preliminary best track data from the NHC website.

Let's create an instance of a TrackDataset object, which will store the North Atlantic HURDAT2 dataset in memory. Once we have this we can use its methods for various types of analyses.

.. GENERATED FROM PYTHON SOURCE LINES 19-22

.. code-block:: default


    basin = tracks.TrackDataset(basin='north_atlantic',source='hurdat',include_btk=False)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    --> Starting to read in HURDAT2 data
    --> Completed reading in HURDAT2 data (4.67 seconds)




.. GENERATED FROM PYTHON SOURCE LINES 23-24

We can quickly check to see what the dataset contains by printing the object:

.. GENERATED FROM PYTHON SOURCE LINES 24-27

.. code-block:: default


    print(basin)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <tropycal.tracks.Dataset>
    Dataset Summary:
        Basin:             north_atlantic
        Source:            hurdat
        Number of storms:  1936
        Maximum wind:      165 knots (Allen 1980)
        Minimum pressure:  882 hPa (Wilma 2005)
        Year range:        1851 — 2021




.. GENERATED FROM PYTHON SOURCE LINES 28-29

Alternatively, converting the basin to a Pandas DataFrame provides more information about each season contained in this basin.

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: default


    basin.to_dataframe()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>all_storms</th>
          <th>named_storms</th>
          <th>hurricanes</th>
          <th>major_hurricanes</th>
          <th>ace</th>
          <th>start_time</th>
          <th>end_time</th>
        </tr>
        <tr>
          <th>season</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1851</th>
          <td>6</td>
          <td>6</td>
          <td>3</td>
          <td>1</td>
          <td>36.1</td>
          <td>1851-06-25 00:00:00</td>
          <td>1851-10-19 18:00:00</td>
        </tr>
        <tr>
          <th>1852</th>
          <td>5</td>
          <td>5</td>
          <td>5</td>
          <td>1</td>
          <td>73.4</td>
          <td>1852-08-19 00:00:00</td>
          <td>1852-10-11 18:00:00</td>
        </tr>
        <tr>
          <th>1853</th>
          <td>8</td>
          <td>8</td>
          <td>4</td>
          <td>2</td>
          <td>76.4</td>
          <td>1853-08-05 12:00:00</td>
          <td>1853-10-22 06:00:00</td>
        </tr>
        <tr>
          <th>1854</th>
          <td>5</td>
          <td>5</td>
          <td>3</td>
          <td>1</td>
          <td>31.1</td>
          <td>1854-06-25 00:00:00</td>
          <td>1854-10-22 18:00:00</td>
        </tr>
        <tr>
          <th>1855</th>
          <td>5</td>
          <td>5</td>
          <td>4</td>
          <td>1</td>
          <td>18.2</td>
          <td>1855-08-06 12:00:00</td>
          <td>1855-09-17 06:00:00</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>2017</th>
          <td>18</td>
          <td>17</td>
          <td>10</td>
          <td>6</td>
          <td>224.8</td>
          <td>2017-04-19 00:00:00</td>
          <td>2017-11-09 00:00:00</td>
        </tr>
        <tr>
          <th>2018</th>
          <td>16</td>
          <td>15</td>
          <td>8</td>
          <td>2</td>
          <td>132.5</td>
          <td>2018-05-25 12:00:00</td>
          <td>2018-10-31 12:00:00</td>
        </tr>
        <tr>
          <th>2019</th>
          <td>20</td>
          <td>18</td>
          <td>6</td>
          <td>3</td>
          <td>132.3</td>
          <td>2019-05-20 18:00:00</td>
          <td>2019-11-24 18:00:00</td>
        </tr>
        <tr>
          <th>2020</th>
          <td>31</td>
          <td>30</td>
          <td>14</td>
          <td>7</td>
          <td>180.3</td>
          <td>2020-05-16 18:00:00</td>
          <td>2020-11-18 12:00:00</td>
        </tr>
        <tr>
          <th>2021</th>
          <td>21</td>
          <td>21</td>
          <td>7</td>
          <td>4</td>
          <td>145.3</td>
          <td>2021-05-22 06:00:00</td>
          <td>2021-11-07 06:00:00</td>
        </tr>
      </tbody>
    </table>
    <p>171 rows × 7 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 33-37

Retrieving storms and seasons
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A TrackDataset object can be used to retrieve individual storms and seasons. To retrieve a Storm object, provide either a tuple of the storm name and year (e.g., ``('michael',2018)``), or a string containing the ID of the storm (e.g., ``'AL012020'``):

.. GENERATED FROM PYTHON SOURCE LINES 37-44

.. code-block:: default


    #Retrieve Hurricane Michael from 2018
    storm = basin.get_storm(('michael',2018))

    #Printing the Storm object lists relevant data:
    print(storm)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <tropycal.tracks.Storm>
    Storm Summary:
        Maximum Wind:      140 knots
        Minimum Pressure:  919 hPa
        Start Date:        0600 UTC 07 October 2018
        End Date:          1800 UTC 11 October 2018

    Variables:
        date        (datetime) [2018-10-06 18:00:00 .... 2018-10-15 18:00:00]
        extra_obs   (int32) [0 .... 0]
        special     (str) [ .... ]
        type        (str) [LO .... EX]
        lat         (float64) [17.8 .... 41.2]
        lon         (float64) [-86.6 .... -10.0]
        vmax        (int32) [25 .... 35]
        mslp        (int32) [1006 .... 1001]
        wmo_basin   (str) [north_atlantic .... north_atlantic]

    More Information:
        id:              AL142018
        operational_id:  AL142018
        name:            MICHAEL
        year:            2018
        season:          2018
        basin:           north_atlantic
        source_info:     NHC Hurricane Database
        source:          hurdat
        ace:             12.5
        realtime:        False
        invest:          False




.. GENERATED FROM PYTHON SOURCE LINES 45-46

To retrieve a season, simply provide the year of the season:

.. GENERATED FROM PYTHON SOURCE LINES 46-53

.. code-block:: default


    #Retrieve the 2017 Atlantic hurricane season
    season = basin.get_season(2017)

    #Printing the Season object lists relevant data:
    print(season)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <tropycal.tracks.Season>
    Season Summary:
        Total Storms:      18
        Named Storms:      17
        Hurricanes:        10
        Major Hurricanes:  6
        Season ACE:        224.8

    More Information:
        year:          2017
        basin:         north_atlantic
        source_basin:  north_atlantic
        source:        hurdat
        source_info:   NHC Hurricane Database




.. GENERATED FROM PYTHON SOURCE LINES 54-55

If you remember the name of a storm but not the year, there is functionality to search for a list of years containing a storm of the requested name:

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default


    print(basin.search_name('Michael'))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [2000, 2012, 2018]




.. GENERATED FROM PYTHON SOURCE LINES 59-62

The previous example for a Storm object illustrated how to retrieve a single storm and make a plot of its observed track. This can also be done from a TrackDataset object, using the ``plot_storm()`` method.

Note that you can pass various arguments to the plot function, such as customizing the map and track aspects. Read through the documentation for more customization options.

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: default


    basin.plot_storm(('michael',2018))




.. image-sg:: /examples/images/sphx_glr_tracks.TrackDataset_001.png
   :alt: Hurricane MICHAEL, 07 Oct 2018 – 11 Oct 2018 140 kt • 919 hPa • 12.5 ACE
   :srcset: /examples/images/sphx_glr_tracks.TrackDataset_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <GeoAxesSubplot:title={'left':'Hurricane MICHAEL','right':'07 Oct 2018 – 11 Oct 2018\n140 kt • 919 hPa • 12.5 ACE'}>



.. GENERATED FROM PYTHON SOURCE LINES 66-69

A new function added with Tropyal v0.4 is the ability to plot a summary of all ongoing tropical cyclone and NHC Tropical Weather Outlook (TWO) activity across the North Atlantic and East Pacific basins.

Simply plug in a valid date and domain to plot over, and this plot will display all activity at the valid time. There are many customization options for this function detailed more thoroughly in the documentation.

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default


    basin.plot_summary(dt.datetime(2020,9,17,0),domain='north_atlantic')




.. image-sg:: /examples/images/sphx_glr_tracks.TrackDataset_002.png
   :alt: Summary & NHC 5-Day Formation Outlook, Valid: 00 UTC 17 Sep 2020
   :srcset: /examples/images/sphx_glr_tracks.TrackDataset_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    --> Reading storm data
    --> Generating plot

    <GeoAxesSubplot:title={'left':'Summary & NHC 5-Day Formation Outlook','right':'Valid: 00 UTC 17 Sep 2020'}>



.. GENERATED FROM PYTHON SOURCE LINES 73-79

Climatological analyses
~~~~~~~~~~~~~~~~~~~~~~~

A TrackDataset object can also be used to perform various climatological analyses. We'll start off with basic data analysis, then shift gears to plotting functionality.

First, let's take a look at the climatology for the basin. The default period is 1991-2020, but this can be customized to any range.

.. GENERATED FROM PYTHON SOURCE LINES 79-82

.. code-block:: default


    basin.climatology(year_range=(1991,2020))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'all_storms': 16.4, 'named_storms': 14.6, 'hurricanes': 7.2, 'major_hurricanes': 3.3, 'ace': 123.3, 'start_time': datetime.datetime(2022, 6, 1, 2, 24), 'end_time': datetime.datetime(2022, 11, 13, 7, 12)}



.. GENERATED FROM PYTHON SOURCE LINES 83-84

Another useful functionality for research or seasonal forecast purposes is to quickly composite multiple hurricane seasons. Simply plug in a list of years, and a year range for the climatology:

.. GENERATED FROM PYTHON SOURCE LINES 84-87

.. code-block:: default


    basin.season_composite([2004,2005,2008,2010,2017,2020])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'all_storms': {'list': [16, 31, 17, 21, 18, 31], 'average': 22.3, 'composite_anomaly': 5.9, 'percentile_ranks': [50.0, 98.4, 61.3, 88.7, 67.7, 98.4]}, 'named_storms': {'list': [15, 28, 16, 19, 17, 30], 'average': 20.8, 'composite_anomaly': 6.2, 'percentile_ranks': [56.5, 96.8, 69.4, 85.5, 74.2, 100.0]}, 'hurricanes': {'list': [9, 15, 8, 12, 10, 14], 'average': 11.3, 'composite_anomaly': 4.1, 'percentile_ranks': [74.2, 100.0, 62.9, 93.5, 83.9, 96.8]}, 'major_hurricanes': {'list': [6, 7, 5, 5, 6, 7], 'average': 6.0, 'composite_anomaly': 2.7, 'percentile_ranks': [90.3, 98.4, 79.0, 79.0, 90.3, 98.4]}, 'ace': {'list': [226.7, 250.3, 145.8, 165.5, 224.8, 180.3], 'average': 198.9, 'composite_anomaly': 75.6, 'percentile_ranks': [93.5, 100.0, 67.7, 71.0, 90.3, 83.9]}}



.. GENERATED FROM PYTHON SOURCE LINES 88-89

Next we'll take a look at plotting functionality, starting off with doing simple Accumulated Cyclone Energy (ACE) analyses. Let's look at the cumulative year-to-date accumulated cyclone energy, with 2018 highlighted and compared against 2017:

.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: default


    basin.ace_climo(plot_year=2018,compare_years=2017)




.. image-sg:: /examples/images/sphx_glr_tracks.TrackDataset_003.png
   :alt: 2018 North Atlantic Accumulated Cyclone Energy 
   :srcset: /examples/images/sphx_glr_tracks.TrackDataset_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <AxesSubplot:title={'left':'2018 North Atlantic Accumulated Cyclone Energy '}>



.. GENERATED FROM PYTHON SOURCE LINES 93-94

We can use the same function to perform a rolling sum, rather than a year-to-date sum. This highlights particularly active periods of tropical cyclone activity. We'll use the same function as before, but with a ``rolling_sum=30`` argument provided:

.. GENERATED FROM PYTHON SOURCE LINES 94-97

.. code-block:: default


    basin.ace_climo(rolling_sum=30,plot_year=2018,compare_years=2017)




.. image-sg:: /examples/images/sphx_glr_tracks.TrackDataset_004.png
   :alt: 2018 North Atlantic Accumulated Cyclone Energy  30-Day Running Sum
   :srcset: /examples/images/sphx_glr_tracks.TrackDataset_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <AxesSubplot:title={'left':'2018 North Atlantic Accumulated Cyclone Energy \n30-Day Running Sum'}>



.. GENERATED FROM PYTHON SOURCE LINES 98-99

Plot cumulative hurricane days for all categories, with 2018 highlighted:

.. GENERATED FROM PYTHON SOURCE LINES 99-102

.. code-block:: default


    basin.hurricane_days_climo(plot_year=2018)




.. image-sg:: /examples/images/sphx_glr_tracks.TrackDataset_005.png
   :alt: 2018 North Atlantic Accumulated Tropical Cyclone Days
   :srcset: /examples/images/sphx_glr_tracks.TrackDataset_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <AxesSubplot:title={'left':'2018 North Atlantic Accumulated Tropical Cyclone Days'}>



.. GENERATED FROM PYTHON SOURCE LINES 103-106

Another climatological analysis available is a climatological correlation between maximum sustained wind and minimum mean sea level pressure (MSLP). While both variables are generally well correlated, factors such as background MSLP and MSLP gradient can affect this relationship.

This function plots the climatological correlation and distribution of wind-MSLP relationship, and can also plot individual storms for comparison against the climatology. We'll look at Hurricane Sandy (2012), which started out with a fairly typical wind-MSLP relationship, but towards the end of its life cycle ended up with an anomalously low MSLP given its sustained wind speed as it substantially grew in size.

.. GENERATED FROM PYTHON SOURCE LINES 106-109

.. code-block:: default


    basin.wind_pres_relationship(storm=('sandy',2012))




.. image-sg:: /examples/images/sphx_glr_tracks.TrackDataset_006.png
   :alt: TC Pressure vs. Wind   North Atlantic | 1851-2021
   :srcset: /examples/images/sphx_glr_tracks.TrackDataset_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <AxesSubplot:title={'center':'TC Pressure vs. Wind \n North Atlantic | 1851-2021'}, xlabel='Maximum sustained winds (kt)', ylabel='Minimum central pressure (hPa)'>



.. GENERATED FROM PYTHON SOURCE LINES 110-116

Gridded Analyses
----------------

Tropycal also offers the capability of gridding tropical cyclone data into a structured latitude / longitude grid. This is done via the ``TrackDataset.gridded_stats()`` method. This method accepts multiple input arguments for various types of analyses. This example will show some of these capabilities.

Let's construct a 1 degree grid and plot the maximum sustained wind recorded at each gridpoint:

.. GENERATED FROM PYTHON SOURCE LINES 116-123

.. code-block:: default


    basin.gridded_stats(request="maximum wind")

    # Let's look at the average change in sustained wind speed over a 24-hour period. By default, the value plotted is for the midpoint of the 24-hour period (so 12 hours preceding and following). We'll use the "prop" keyword argument to set the colormap to "bwr" and set the contour level range:

    basin.gridded_stats(request="average wind change in 24 hours",prop={'cmap':'bwr','clevs':[-80,80]})




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/images/sphx_glr_tracks.TrackDataset_007.png
         :alt: Maximum wind (kt), Jan 01 – Dec 31 • 1851 – 2021
         :srcset: /examples/images/sphx_glr_tracks.TrackDataset_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/images/sphx_glr_tracks.TrackDataset_008.png
         :alt: Average wind (kt) change in 24 hours, middle ≥ 5 storms/bin, Jan 01 – Dec 31 • 1851 – 2021
         :srcset: /examples/images/sphx_glr_tracks.TrackDataset_008.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    maximum wind
    --> Getting filtered storm tracks
    --> Grouping by lat/lon/storm
    --> Generating plot
    average wind change in 24 hours
    --> Getting filtered storm tracks
    --> Grouping by lat/lon/storm
    --> Generating plot

    <GeoAxesSubplot:title={'left':'Average wind (kt) change in 24 hours, middle\n≥ 5 storms/bin','right':'Jan 01 – Dec 31 • 1851 – 2021'}>



.. GENERATED FROM PYTHON SOURCE LINES 124-134

IBTrACS Dataset
---------------

We can also read in IBTrACS data and use it the same way as we would use HURDAT2 data. There are caveats to using IBTrACS data, however, which are described more in depth in the :doc:`../data` page. We'll retrieve the global IBTrACS dataset, using the Joint Typhoon Warning Center (JTWC) data, modified with the Neumann reanalysis for southern hemisphere storms, and including a special reanalysis for Cyclone Catarina (2004) in Brazil.

.. warning::

    By default, IBTrACS data is read in from an online source. If you're reading in the global IBTrACS dataset, this could be quite slow. For global IBTrACS, it is recommended to have the CSV file saved locally (`link to data`_), then set the flag ``ibtracs_url="local_path"``.

.. _link to data: https://www.ncei.noaa.gov/data/international-best-track-archive-for-climate-stewardship-ibtracs/v04r00/access/csv/ibtracs.ALL.list.v04r00.csv

.. GENERATED FROM PYTHON SOURCE LINES 134-137

.. code-block:: default


    ibtracs = tracks.TrackDataset(basin='all',source='ibtracs',ibtracs_mode='jtwc_neumann',catarina=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    --> Starting to read in ibtracs data
    --> Completed reading in ibtracs data (107.07 seconds)




.. GENERATED FROM PYTHON SOURCE LINES 138-141

In its current form, tropycal is not configured to support all types of analyses for global IBTrACS, particularly near the dateline. Future updates will work to improve this functionality.

Let's make a plot of the maximum sustained wind of TCs globally:

.. GENERATED FROM PYTHON SOURCE LINES 141-144

.. code-block:: default


    ibtracs.gridded_stats(request="maximum wind")




.. image-sg:: /examples/images/sphx_glr_tracks.TrackDataset_009.png
   :alt: Maximum wind (kt), Jan 01 – Dec 31 • 1851 – 2022
   :srcset: /examples/images/sphx_glr_tracks.TrackDataset_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    maximum wind
    --> Getting filtered storm tracks
    --> Grouping by lat/lon/storm
    --> Generating plot

    <GeoAxesSubplot:title={'left':'Maximum wind (kt)','right':'Jan 01 – Dec 31 • 1851 – 2022'}>



.. GENERATED FROM PYTHON SOURCE LINES 145-146

Make a plot of the total number of storms per 1 degree gridbox worldwide:

.. GENERATED FROM PYTHON SOURCE LINES 146-149

.. code-block:: default


    ibtracs.gridded_stats(request="number of storms",prop={'cmap':'plasma_r'})




.. image-sg:: /examples/images/sphx_glr_tracks.TrackDataset_010.png
   :alt: Number of storms, Jan 01 – Dec 31 • 1851 – 2022
   :srcset: /examples/images/sphx_glr_tracks.TrackDataset_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    number of storms
    --> Getting filtered storm tracks
    --> Grouping by lat/lon/storm
    --> Generating plot

    <GeoAxesSubplot:title={'left':'Number of storms','right':'Jan 01 – Dec 31 • 1851 – 2022'}>



.. GENERATED FROM PYTHON SOURCE LINES 150-151

Make a plot of the total number of rapidly intensifying storms (>=30 kt over 24 hours) per 1 degree gridbox:

.. GENERATED FROM PYTHON SOURCE LINES 151-153

.. code-block:: default


    ibtracs.gridded_stats(request="number of storms",thresh={'dv_min':30},prop={'cmap':'plasma_r'})



.. image-sg:: /examples/images/sphx_glr_tracks.TrackDataset_011.png
   :alt: Number of storms ≥ 30kt / 24hr, Jan 01 – Dec 31 • 1851 – 2022
   :srcset: /examples/images/sphx_glr_tracks.TrackDataset_011.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    number of storms
    --> Getting filtered storm tracks
    --> Grouping by lat/lon/storm
    --> Generating plot

    <GeoAxesSubplot:title={'left':'Number of storms\n≥ 30kt / 24hr','right':'Jan 01 – Dec 31 • 1851 – 2022'}>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  58.847 seconds)


.. _sphx_glr_download_examples_tracks.TrackDataset.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tracks.TrackDataset.py <tracks.TrackDataset.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tracks.TrackDataset.ipynb <tracks.TrackDataset.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
